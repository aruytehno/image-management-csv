import os
import hashlib
import streamlit as st
import pandas as pd
import math
from PIL import Image
import requests
from io import BytesIO

# –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
IMAGE_CACHE_DIR = "image_cache"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ URL
def get_image_filename(url):
    hash_object = hashlib.md5(url.encode())
    return hash_object.hexdigest() + ".png"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –∫–µ—à–∞ –∏–ª–∏ —Å URL
def load_image_from_cache_or_url(url, idx):
    if f'image_{idx}' not in st.session_state:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º –∫–µ—à–µ
            if not os.path.exists(IMAGE_CACHE_DIR):
                os.makedirs(IMAGE_CACHE_DIR)

            image_filename = os.path.join(IMAGE_CACHE_DIR, get_image_filename(url))

            # –ï—Å–ª–∏ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∑–∞–≥—Ä—É–∂–∞–µ–º –µ–≥–æ –∏–∑ –∫–µ—à–∞
            if os.path.exists(image_filename):
                img = Image.open(image_filename)
                img.load()
                st.session_state[f'image_{idx}'] = (img, os.path.getsize(image_filename))
            else:
                # –ï—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç, –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å URL –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à
                response = requests.get(url)
                img = Image.open(BytesIO(response.content))
                img.save(image_filename)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ –∫–µ—à
                img.load()
                st.session_state[f'image_{idx}'] = (img, response.headers.get('Content-Length', None))
        except Exception:
            st.session_state[f'image_{idx}'] = (None, None)
    return st.session_state[f'image_{idx}']

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–æ –∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ—Ä—è–¥–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
def display_data(df, image_columns, start, end):
    for i in range(start, end):
        row = df.iloc[i]

        if '–ö–æ–¥ –∞—Ä—Ç–∏–∫—É–ª–∞' in df.columns:
            artikul_value = row['–ö–æ–¥ –∞—Ä—Ç–∏–∫—É–ª–∞']
            st.write(f"–°—Ç—Ä–æ–∫–∞ {i + 1} ‚Äî –ê—Ä—Ç–∏–∫—É–ª: {artikul_value if artikul_value else '–ù–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è'}")
        else:
            st.write(f"–°—Ç—Ä–æ–∫–∞ {i + 1} ‚Äî –ê—Ä—Ç–∏–∫—É–ª: –°—Ç–æ–ª–±–µ—Ü '–ö–æ–¥ –∞—Ä—Ç–∏–∫—É–ª–∞' –Ω–µ –Ω–∞–π–¥–µ–Ω!")

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –ø—Ä–æ–Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
        images = [row[col] for col in image_columns if pd.notna(row[col])]

        # –°–æ–∑–¥–∞–µ–º –ø–æ—Ä—è–¥–æ–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–∏ –≤ session_state
        if f'order_{i}' not in st.session_state:
            st.session_state[f'order_{i}'] = list(range(len(images)))

        # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ—Ä—è–¥–æ–∫ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        st.session_state[f'order_{i}'] = [img_idx for img_idx in st.session_state[f'order_{i}'] if img_idx < len(images)]

        if images:
            scroll_container = st.container()
            with scroll_container:
                cols = st.columns(min(10, len(images)))
                for idx, img_idx in enumerate(st.session_state[f'order_{i}']):
                    with cols[idx % 10]:
                        img_url = images[img_idx]
                        unique_key = f'{i}_{img_idx}_{idx}'
                        img, img_size = load_image_from_cache_or_url(img_url, unique_key)
                        if img:
                            st.image(img, width=100)
                        else:
                            st.markdown(f"""
                                <div style='width:100px;height:100px;background-color:grey;display:flex;align-items:center;justify-content:center;color:white;flex-direction:column;'>
                                    <span>bad link</span>
                                    <a href='{img_url}' target='_blank' style='color:white; text-decoration:none;'>üîó</a>
                                </div>
                            """, unsafe_allow_html=True)

                        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ—Ä—è–¥–∫–∞ –∏ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
                        with st.container():
                            if st.button(f'‚ùå', key=f'delete_{unique_key}'):
                                st.session_state[f'order_{i}'].remove(img_idx)
                                df.at[i, image_columns[img_idx]] = None

                            if idx > 0:
                                if st.button(f'‚¨ÖÔ∏è', key=f'to_start_{unique_key}'):
                                    st.session_state[f'order_{i}'].insert(0, st.session_state[f'order_{i}'].pop(idx))

                            if idx < len(st.session_state[f'order_{i}']) - 1:
                                if st.button(f'‚û°Ô∏è', key=f'to_end_{unique_key}'):
                                    st.session_state[f'order_{i}'].append(st.session_state[f'order_{i}'].pop(idx))

                reordered_images = [df.loc[i, image_columns[j]] for j in st.session_state[f'order_{i}']]
                for j, col in enumerate(image_columns):
                    if j < len(reordered_images):
                        df.at[i, col] = reordered_images[j]
                    else:
                        df.at[i, col] = None

        st.write("---")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main(file_name, rows_per_page=10):
    st.title("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö CSV")

    # –ó–∞–≥—Ä—É–∑–∫–∞ CSV —Ñ–∞–π–ª–∞ –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø—É—Ç–∏
    try:
        df = pd.read_csv(file_name, sep=';', dtype=str)
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {e}")
        return

    st.write("–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã –≤ —Ñ–∞–π–ª–µ:")
    st.write(df.columns.tolist())

    image_columns = [col for col in df.columns if col.startswith('–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤')]

    total_rows = df.shape[0]
    total_pages = math.ceil(total_rows / rows_per_page)

    if 'page' not in st.session_state:
        st.session_state.page = 1


    # –°–ª–∞–π–¥–µ—Ä –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    if total_pages > 1:
        st.session_state.page = st.slider("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É", min_value=1, max_value=total_pages,
                                          value=st.session_state.page)
    else:
        st.session_state.page = 1

    # –í–≤–æ–¥ –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    st.session_state.page = st.number_input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã", min_value=1, max_value=total_pages,
                                                value=st.session_state.page)

    start_row = (st.session_state.page - 1) * rows_per_page
    end_row = min(start_row + rows_per_page, total_rows)

    display_data(df, image_columns, start_row, end_row)

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü, –∞ –Ω–µ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ–∫—É—â–µ–π
    if st.button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è"):
        try:
            for i in range(total_rows):
                if f'order_{i}' in st.session_state:
                    order = st.session_state[f'order_{i}']
                    reordered_images = [df.loc[i, image_columns[j]] for j in order]

                    for j, col in enumerate(image_columns):
                        if j < len(reordered_images):
                            df.at[i, col] = reordered_images[j]
                        else:
                            df.at[i, col] = None

            # –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ñ–∞–π–ª —Å –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ –¥–ª—è –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
            df.to_csv(file_name, index=False, sep=';')
            st.success(f"–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–ª—è –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü –≤ —Ñ–∞–π–ª: {file_name}")
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")

if __name__ == "__main__":
    file_name = "update_assortment.csv"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –∏–º—è –≤–∞—à–µ–≥–æ —Ñ–∞–π–ª–∞
    main(file_name, rows_per_page=10)
