import streamlit as st
import pandas as pd
import math
from PIL import Image
import requests
from io import BytesIO

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å URL
def load_image_from_url(url, idx):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–æ –ª–∏ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ URL
    if f'image_{idx}' not in st.session_state:
        try:
            response = requests.get(url)
            img = Image.open(BytesIO(response.content))
            img.load()  # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –µ–≥–æ —Ä–∞–∑–º–µ—Ä –≤ —Å–µ—Å—Å–∏—é
            st.session_state[f'image_{idx}'] = (img, response.headers.get('Content-Length', None))
        except Exception:
            st.session_state[f'image_{idx}'] = (None, None)
    return st.session_state[f'image_{idx}']  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–æ –∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ—Ä—è–¥–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
def display_data(df, image_columns, start, end):
    for i in range(start, end):
        row = df.iloc[i]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å—Ç–æ–ª–±–µ—Ü '–ö–æ–¥ –∞—Ä—Ç–∏–∫—É–ª–∞' –∏ –≤—ã–≤–æ–¥–∏–º –µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏–µ
        if '–ö–æ–¥ –∞—Ä—Ç–∏–∫—É–ª–∞' in df.columns:
            artikul_value = row['–ö–æ–¥ –∞—Ä—Ç–∏–∫—É–ª–∞']
            st.write(f"–°—Ç—Ä–æ–∫–∞ {i + 1} ‚Äî –ê—Ä—Ç–∏–∫—É–ª: {artikul_value if artikul_value else '–ù–µ—Ç –∑–Ω–∞—á–µ–Ω–∏—è'}")
        else:
            st.write(f"–°—Ç—Ä–æ–∫–∞ {i + 1} ‚Äî –ê—Ä—Ç–∏–∫—É–ª: –°—Ç–æ–ª–±–µ—Ü '–ö–æ–¥ –∞—Ä—Ç–∏–∫—É–ª–∞' –Ω–µ –Ω–∞–π–¥–µ–Ω!")

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –ø—Ä–æ–Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
        images = [row[col] for col in image_columns if pd.notna(row[col])]

        # –°–æ–∑–¥–∞–µ–º –ø–æ—Ä—è–¥–æ–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–∏ –≤ session_state
        if f'order_{i}' not in st.session_state:
            st.session_state[f'order_{i}'] = list(range(len(images)))

        # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ—Ä—è–¥–æ–∫ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        st.session_state[f'order_{i}'] = [img_idx for img_idx in st.session_state[f'order_{i}'] if img_idx < len(images)]

        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        if images:
            # –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–æ–ª–ª–±–∞—Ä –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            scroll_container = st.container()
            with scroll_container:
                cols = st.columns(min(10, len(images)))
                for idx, img_idx in enumerate(st.session_state[f'order_{i}']):
                    with cols[idx % 10]:
                        img_url = images[img_idx]
                        unique_key = f'{i}_{img_idx}_{idx}'
                        img, img_size = load_image_from_url(img_url, unique_key)
                        if img:
                            st.image(img, width=100)
                            img_width, img_height = img.size
                            formatted_size = f"{img_width}x{img_height}"
                            formatted_weight = f"{int(img_size)/1024:.2f} KB" if img_size else "–†–∞–∑–º–µ—Ä –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"
                            # st.caption(f"–†–∞–∑–º–µ—Ä: {formatted_size}")
                            # st.caption(f"–í–µ—Å: {formatted_weight}")
                        else:
                            # –ü–æ–∫–∞–∑–∞—Ç—å "bad link", –µ—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å
                            st.markdown(f"""
                                <div style='width:100px;height:100px;background-color:grey;display:flex;align-items:center;justify-content:center;color:white;flex-direction:column;'>
                                    <span>bad link</span>
                                    <a href='{img_url}' target='_blank' style='color:white; text-decoration:none;'>üîó</a>
                                </div>
                            """, unsafe_allow_html=True)

                        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–Ω–æ–ø–æ–∫ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è
                        with st.container():
                            # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                            if st.button(f'‚ùå', key=f'delete_{unique_key}'):
                                st.session_state[f'order_{i}'].remove(img_idx)
                                df.at[i, image_columns[img_idx]] = None

                            # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞ (–µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ)
                            if idx > 0:
                                if st.button(f'‚¨ÖÔ∏è', key=f'to_start_{unique_key}'):
                                    st.session_state[f'order_{i}'].insert(0, st.session_state[f'order_{i}'].pop(idx))

                            # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –∫–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞ (–µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ)
                            if idx < len(st.session_state[f'order_{i}']) - 1:
                                if st.button(f'‚û°Ô∏è', key=f'to_end_{unique_key}'):
                                    st.session_state[f'order_{i}'].append(st.session_state[f'order_{i}'].pop(idx))

                # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Ä—è–¥–æ–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ DataFrame —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
                reordered_images = [df.loc[i, image_columns[j]] for j in st.session_state[f'order_{i}']]
                for j, col in enumerate(image_columns):
                    if j < len(reordered_images):
                        df.at[i, col] = reordered_images[j]
                    else:
                        df.at[i, col] = None

        st.write("---")


# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main(rows_per_page=10):
    st.title("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö CSV")

    # –ó–∞–≥—Ä—É–∑–∫–∞ CSV —Ñ–∞–π–ª–∞
    uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV —Ñ–∞–π–ª", type=["csv"])

    if uploaded_file:
        try:
            df = pd.read_csv(uploaded_file, sep=';', dtype=str)
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {e}")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–∏–µ —Å—Ç–æ–ª–±—Ü—ã –µ—Å—Ç—å –≤ DataFrame
        st.write("–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã –≤ —Ñ–∞–π–ª–µ:")
        st.write(df.columns.tolist())

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–æ–ª–±—Ü—ã —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
        image_columns = [col for col in df.columns if col.startswith('–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤')]

        # –ü–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω—ã–π –≤—ã–≤–æ–¥
        total_rows = df.shape[0]
        total_pages = math.ceil(total_rows / rows_per_page)

        if 'orders' not in st.session_state:
            st.session_state.orders = {}
            for i in range(total_rows):
                row_images = [df.loc[i, col] for col in image_columns if pd.notna(df.loc[i, col])]
                st.session_state.orders[i] = list(range(len(row_images)))
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
        if 'page' not in st.session_state:
            st.session_state.page = 1

        # –°–ª–∞–π–¥–µ—Ä –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        if total_pages > 1:
            st.session_state.page = st.slider("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É", min_value=1, max_value=total_pages, value=st.session_state.page)
        else:
            st.session_state.page = 1

        # –í–≤–æ–¥ –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        st.session_state.page = st.number_input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã", min_value=1, max_value=total_pages, value=st.session_state.page)

        # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        start_row = (st.session_state.page - 1) * rows_per_page
        end_row = min(start_row + rows_per_page, total_rows)

        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        display_data(df, image_columns, start_row, end_row)

        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤–Ω–∏–∑—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤–Ω–∏–∑—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        if st.button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ CSV"):
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö —Å—Ç—Ä–æ–∫, –∞ –Ω–µ —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            for i in range(total_rows):
                if f'order_{i}' in st.session_state:
                    order = st.session_state[f'order_{i}']
                    reordered_images = [df.loc[i, image_columns[j]] for j in order]

                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–æ–ª–±—Ü—ã —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
                    for j, col in enumerate(image_columns):
                        if j < len(reordered_images):
                            df.at[i, col] = reordered_images[j]
                        else:
                            df.at[i, col] = None

            # –°–æ–∑–¥–∞–Ω–∏–µ CSV –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
            csv = df.to_csv(index=False, sep=';').encode('utf-8')

            st.download_button(
                label="–°–∫–∞—á–∞—Ç—å –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–π CSV",
                data=csv,
                file_name='update_assortment.csv',
                mime='text/csv',
            )


if __name__ == "__main__":
    main(rows_per_page=10)
